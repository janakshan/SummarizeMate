import { useNavigation, useRoute } from "@react-navigation/native";
import {
  ArrowLeft,
  Clock,
  Copy,
  Download,
  FileText,
  Heart,
  Share as ShareIcon,
  Sparkles,
} from "lucide-react-native";
import { useState } from "react";
import {
  Alert,
  SafeAreaView,
  ScrollView,
  Share,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";

export default function SummaryResultScreen() {
  const route = useRoute();
  const navigation = useNavigation();
  const { originalText, summary, summaryType, wordCount } = route.params;

  const [isSaved, setIsSaved] = useState(false);

  const getSummaryTypeInfo = (type) => {
    switch (type) {
      case "brief":
        return { label: "Brief Summary", color: "#10B981", bgColor: "#ECFDF5" };
      case "detailed":
        return {
          label: "Detailed Analysis",
          color: "#F59E0B",
          bgColor: "#FFFBEB",
        };
      case "bullet":
        return { label: "Key Points", color: "#8B5CF6", bgColor: "#F3E8FF" };
      default:
        return { label: "Summary", color: "#6B7280", bgColor: "#F9FAFB" };
    }
  };

  const typeInfo = getSummaryTypeInfo(summaryType);

  const handleCopy = async () => {
    try {
      // In a real app, you'd use Clipboard API
      Alert.alert("Copied!", "Summary copied to clipboard");
    } catch (error) {
      Alert.alert("Error", "Failed to copy summary");
    }
  };

  const handleShare = async () => {
    try {
      await Share.share({
        message: `Summary:\n\n${summary}\n\nGenerated by SummarizeMate`,
        title: "Summary from SummarizeMate",
      });
    } catch (error) {
      Alert.alert("Error", "Failed to share summary");
    }
  };

  const handleSave = () => {
    setIsSaved(!isSaved);
    Alert.alert(
      isSaved ? "Removed from Saved" : "Saved!",
      isSaved
        ? "Summary removed from your saved items"
        : "Summary saved to your history"
    );
  };

  const handleDownload = () => {
    Alert.alert("Download", "Download functionality would be implemented here");
  };

  const calculateReadingTime = (text) => {
    const wordsPerMinute = 200;
    const words = text.split(" ").length;
    const minutes = Math.ceil(words / wordsPerMinute);
    return minutes;
  };

  const compressionRatio = Math.round(
    ((originalText.length - summary.length) / originalText.length) * 100
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        {/* Header Stats */}
        <View style={styles.statsContainer}>
          <View style={styles.statItem}>
            <FileText size={20} color="#6366F1" strokeWidth={2} />
            <Text style={styles.statValue}>{wordCount}</Text>
            <Text style={styles.statLabel}>Original Words</Text>
          </View>
          <View style={styles.statItem}>
            <Sparkles size={20} color="#10B981" strokeWidth={2} />
            <Text style={styles.statValue}>{summary.split(" ").length}</Text>
            <Text style={styles.statLabel}>Summary Words</Text>
          </View>
          <View style={styles.statItem}>
            <Clock size={20} color="#F59E0B" strokeWidth={2} />
            <Text style={styles.statValue}>
              {calculateReadingTime(summary)}m
            </Text>
            <Text style={styles.statLabel}>Read Time</Text>
          </View>
        </View>

        {/* Summary Type Badge */}
        <View style={styles.badgeContainer}>
          <View
            style={[styles.typeBadge, { backgroundColor: typeInfo.bgColor }]}
          >
            <Text style={[styles.typeBadgeText, { color: typeInfo.color }]}>
              {typeInfo.label}
            </Text>
          </View>
          <Text style={styles.compressionText}>
            {compressionRatio}% compression
          </Text>
        </View>

        {/* Summary Content */}
        <View style={styles.summarySection}>
          <Text style={styles.sectionTitle}>Summary</Text>
          <View style={styles.summaryContainer}>
            <Text style={styles.summaryText}>{summary}</Text>
          </View>
        </View>

        

        {/* Action Buttons */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity style={styles.primaryAction} onPress={handleCopy}>
            <Copy size={20} color="#FFFFFF" strokeWidth={2} />
            <Text style={styles.primaryActionText}>Copy Summary</Text>
          </TouchableOpacity>

          <View style={styles.secondaryActions}>
            <TouchableOpacity
              style={styles.secondaryAction}
              onPress={handleShare}
            >
              <ShareIcon size={20} color="#6B7280" strokeWidth={2} />
              <Text style={styles.secondaryActionText}>Share</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[
                styles.secondaryAction,
                isSaved && styles.secondaryActionActive,
              ]}
              onPress={handleSave}
            >
              <Heart
                size={20}
                color={isSaved ? "#EF4444" : "#6B7280"}
                strokeWidth={2}
                fill={isSaved ? "#EF4444" : "none"}
              />
              <Text
                style={[
                  styles.secondaryActionText,
                  isSaved && styles.secondaryActionTextActive,
                ]}
              >
                {isSaved ? "Saved" : "Save"}
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.secondaryAction}
              onPress={handleDownload}
            >
              <Download size={20} color="#6B7280" strokeWidth={2} />
              <Text style={styles.secondaryActionText}>Export</Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Generate Another Button */}
        <View style={styles.bottomActions}>
          <TouchableOpacity
            style={styles.generateAnotherButton}
            onPress={() => navigation.goBack()}
          >
            <ArrowLeft size={20} color="#6366F1" strokeWidth={2} />
            <Text style={styles.generateAnotherButtonText}>
              Generate Another Summary
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB",
  },
  scrollView: {
    flex: 1,
  },
  statsContainer: {
    flexDirection: "row",
    paddingHorizontal: 24,
    paddingVertical: 20,
    backgroundColor: "#FFFFFF",
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB",
  },
  statItem: {
    flex: 1,
    alignItems: "center",
    paddingVertical: 12,
  },
  statValue: {
    fontSize: 24,
    fontFamily: "Inter-Bold",
    color: "#111827",
    marginTop: 8,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    fontFamily: "Inter-Medium",
    color: "#6B7280",
    textAlign: "center",
  },
  badgeContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 24,
    paddingVertical: 16,
    backgroundColor: "#FFFFFF",
    borderBottomWidth: 1,
    borderBottomColor: "#E5E7EB",
  },
  typeBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
  },
  typeBadgeText: {
    fontSize: 14,
    fontFamily: "Inter-SemiBold",
  },
  compressionText: {
    fontSize: 14,
    fontFamily: "Inter-Medium",
    color: "#10B981",
  },
  summarySection: {
    padding: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: "Inter-SemiBold",
    color: "#111827",
    marginBottom: 16,
  },
  summaryContainer: {
    backgroundColor: "#FFFFFF",
    borderRadius: 16,
    borderWidth: 1,
    borderColor: "#E5E7EB",
    padding: 20,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  summaryText: {
    fontSize: 16,
    fontFamily: "Inter-Regular",
    color: "#111827",
    lineHeight: 26,
  },
  originalSection: {
    paddingHorizontal: 24,
    paddingBottom: 24,
  },
  originalContainer: {
    backgroundColor: "#F8FAFC",
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#E2E8F0",
    padding: 16,
  },
  originalText: {
    fontSize: 14,
    fontFamily: "Inter-Regular",
    color: "#64748B",
    lineHeight: 22,
    marginBottom: 12,
  },
  expandButton: {
    alignSelf: "flex-start",
  },
  expandButtonText: {
    fontSize: 14,
    fontFamily: "Inter-Medium",
    color: "#6366F1",
  },
  actionsContainer: {
    paddingHorizontal: 24,
    paddingBottom: 24,
  },
  primaryAction: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#6366F1",
    paddingVertical: 16,
    borderRadius: 12,
    marginBottom: 16,
    gap: 8,
    shadowColor: "#6366F1",
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  primaryActionText: {
    fontSize: 16,
    fontFamily: "Inter-SemiBold",
    color: "#FFFFFF",
  },
  secondaryActions: {
    flexDirection: "row",
    gap: 12,
  },
  secondaryAction: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#FFFFFF",
    borderWidth: 1,
    borderColor: "#E5E7EB",
    paddingVertical: 12,
    borderRadius: 10,
    gap: 6,
  },
  secondaryActionActive: {
    borderColor: "#EF4444",
    backgroundColor: "#FEF2F2",
  },
  secondaryActionText: {
    fontSize: 14,
    fontFamily: "Inter-Medium",
    color: "#6B7280",
  },
  secondaryActionTextActive: {
    color: "#EF4444",
  },
  bottomActions: {
    paddingHorizontal: 24,
    paddingBottom: 32,
  },
  generateAnotherButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#EEF2FF",
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
  },
  generateAnotherButtonText: {
    fontSize: 16,
    fontFamily: "Inter-SemiBold",
    color: "#6366F1",
  },
});
